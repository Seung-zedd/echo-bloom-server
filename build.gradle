plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.4'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.checkmate'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
    set('springCloudVersion', '2025.0.0') // Spring Cloud 2025.0.x (Northfields) 최신 GA
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {

    // DB 스키마 버전 관리하는 도구
    implementation 'org.flywaydb:flyway-core'

    // FeignClient(해커톤 끝나고 나중에 WebClient로 migrate할 예정)
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

    // github-action으로 Apidog 자동화
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.9'

    // Spring WebFlux for WebClient (비동기 HTTP 클라이언트)
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    // JWT 라이브러리 의존성을 추가
    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'

    // p6spy 디펜던시 (쿼리 파라미터 출력)
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // spring-security 관련
	implementation 'org.springframework.boot:spring-boot-starter-security'

    // OAuth2 Resource Server (Boot BOM에서 버전 관리)
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'

	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'

    // 개발 환경에서만 적용(developmentOnly로 이미 운영 환경에 배포되는 jar,war 파일에 포함 x)
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    // QueryDSL
    //! 나중에 사용할 때 mapstruct와 build 경로가 꼬이기 때문에 추가 설정할 것
    /*implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta' // ✅ :jakarta 분류자(classifier)가 핵심!
    annotationProcessor "com.querydsl:querydsl-apt:5.1.0:jakarta" // ✅ 여기도 마찬가지
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"*/

    // Lombok (must come before MapStruct)
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // Lombok-MapStruct Binding (ensures compatibility)
    implementation 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

    // MapStruct (must come after Lombok)
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
    testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

}


/*// querydsl generated 경로 설정
def querydslDir = file("build/generated/querydsl")
// mapper generated 경로 설적
def mapstructDir = file("build/generated/mapstruct")

// sourceSets 블록을 사용하여 생성된 Q클래스 경로를 소스 코드로 인식시킴
sourceSets {
    main {
        java {
            srcDirs += [querydslDir]
            srcDirs += 'build/generated/sources/annotationProcessor/java/main' // For MapStruct (default path)
        }
    }
}

// 💡 "모든 JavaCompile"이 아닌, "main 소스를 컴파일하는 compileJava 작업"에만
//    Q클래스 생성 경로를 지정하도록 범위를 좁힙니다.
tasks.named('compileJava') {
    options.getGeneratedSourceOutputDirectory().set(querydslDir)

}

// clean 작업 시 생성된 Q클래스 폴더를 삭제
clean.doLast {
    delete(querydslDir)
    // Clean the default annotation processor directory
    delete('build/generated/sources/annotationProcessor')
}*/

tasks.named('test') {
	useJUnitPlatform()
}
