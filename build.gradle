plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.4'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.checkmate'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
    // JWT 라이브러리 의존성을 추가
    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'

    // p6spy 디펜던시 (쿼리 파라미터 출력)
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
    // 개발 환경에서만 적용(운영 환경에 배포되는 jar,war 파일에는 포함 x)
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    // QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta' // ✅ :jakarta 분류자(classifier)가 핵심!
    annotationProcessor "com.querydsl:querydsl-apt:5.1.0:jakarta" // ✅ 여기도 마찬가지
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    // MapStruct 사용
    //! lombok보다 뒤에 dependency 선언이 되어야 함
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
    //test 롬복 사용
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
}

// querydsl generated 경로 설정
def querydslDir = file("build/generated/querydsl")

// sourceSets 블록을 사용하여 생성된 Q클래스 경로를 소스 코드로 인식시킴
sourceSets {
    main {
        java {
            srcDirs += [querydslDir]
        }
    }
}

// 💡 "모든 JavaCompile"이 아닌, "main 소스를 컴파일하는 compileJava 작업"에만
//    Q클래스 생성 경로를 지정하도록 범위를 좁힙니다.
tasks.named('compileJava') {
    options.getGeneratedSourceOutputDirectory().set(querydslDir)
}

// clean 작업 시 생성된 Q클래스 폴더를 삭제
clean.doLast {
    delete(querydslDir)
}

tasks.named('test') {
	useJUnitPlatform()
}
